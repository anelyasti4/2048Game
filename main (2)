import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyEvent;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.util.Random;


public class Main extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    Group group;
    Tile tiles[][];
    boolean checkTile[][];

    @Override
    public void start(Stage stage) {
        group = new Group();
        tiles = new Tile[4][4];
        checkTile = new boolean[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                checkTile[i][j] = false;
            }
        }


        startPoint();

        Scene scene = new Scene(group, 205, 205);
        System.out.println("UP");
        scene.setOnKeyReleased(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent e) {
                switch (e.getCode()) {
                    case UP:
                        // System.out.println("UP");
                        movingUP();
                        break;

                    case DOWN:
                        System.out.println("DOWN");
                        //tiles[3][2].transition(2, 2);
                        break;
                    case LEFT:
                        // System.out.println("LEFT");
                        break;
                    case RIGHT:
                        //System.out.println("RIGHT");
                        break;


                }


            }


        });


        stage.setScene(scene);
        stage.show();
    }

    public void startPoint() {
        Random rand = new Random();
        int x1 = rand.nextInt(4);
        int y1 = rand.nextInt(4);

        int x2 = rand.nextInt(4);
        int y2 = rand.nextInt(4);

//        int x1 = 2;
//        int y1 = 2;
//        int x2 = 2;
//        int y2 = 3;

        if (x1 == x2 && y1 == y2) {
            startPoint();
            return;
        }

        //for random generating tiles
        tiles[y1][x1] = new Tile(x1 * 50 + 5, y1 * 50 + 5);
        tiles[y2][x2] = new Tile(x2 * 50 + 5, y2 * 50 + 5);
        checkTile[y1][x1] = true;
        checkTile[y2][x2] = true;
        //System.out.println(x1 + " " + y1 + " " + x2 + " " + y2);
        group.getChildren().addAll(tiles[y2][x2].getTile(), tiles[y1][x1].getTile());
        tiles[y1][x1].setWeight(2);
        tiles[y2][x2].setWeight(2);
    }

    public void movingUP() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (checkTile[i][j]){
                    tiles[i][j].transition(j,0);
//                    checkTile[i][j]=false;
//                    checkTile[0][j]=true;
//                    tiles[0][j]=tiles[i][j];
//                    tiles[i][j]=null;
                }
            }
        }
    }


}

class Tile {
    private Button tile;
    private int weight;
    private Double x, y;
    AnimationTimer timer;

    Tile(double x, double y) {
        Random rnd = new Random();
        this.x = x;
        this.y = y;
        this.weight = (rnd.nextInt(2) + 1) * 2;
        tile = new Button("" + this.weight);
        tile.relocate(x, y);
        tile.setMaxSize(45, 45);
        tile.setFont(new Font(11));
        tile.setMinSize(45, 45);
    }

    public Button getTile() {
        return tile;
    }

    public void setWeight(int weight) {
        this.weight = weight;
    }

    public void transition(double x, double y) {

        double finalX = x * 50 + 5;
        double finalY = y * 50 + 5;

        timer = new AnimationTimer() {
            int speedOfMoving = 5;

            @Override
            public void handle(long now) {
                if (tile.getLayoutX() < finalX) {
                    tile.relocate(tile.getLayoutX() + speedOfMoving, tile.getLayoutY());
                } else if (tile.getLayoutX() > finalX) {
                    tile.relocate(tile.getLayoutX() - speedOfMoving, tile.getLayoutY());
                } else if (tile.getLayoutY() < finalY) {
                    tile.relocate(tile.getLayoutX(), tile.getLayoutY() + speedOfMoving);
                } else if (tile.getLayoutY() > finalY) {
                    tile.relocate(tile.getLayoutX(), tile.getLayoutY() - speedOfMoving);
                } else {
                    timer.stop();
                }

                // System.out.println(tile.getLayoutX()+" "+ tile.getLayoutY()+" : "+finalX+" "+finalY);
            }
        };
        timer.start();
    }

}